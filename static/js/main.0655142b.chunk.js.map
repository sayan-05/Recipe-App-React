{"version":3,"sources":["serviceWorker.js","components/Item.jsx","components/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Item","props","className","source","recipe","label","ingredients","map","text","calories","totalWeight","src","image","alt","width","App","useState","item","getItem","data","getData","initialData","finalData","useEffect","getRecipes","a","url","fetch","response","json","jsonData","hits","console","log","type","placeholder","onChange","event","target","value","onClick","dataObject","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCmBSC,G,MAlCF,SAACC,GACV,OAAQ,oCACJ,yBAAKC,UAAU,WAEX,gCAAMD,EAAME,OAAOC,OAAOC,MAA1B,KACA,yBAAKH,UAAU,SAEPD,EAAME,OAAOC,OAAOE,YAAYC,KAC5B,SAACD,GACG,OACI,4BACI,4BACKA,EAAYE,WASzC,6BACI,+BAAI,0BAAMN,UAAU,WAAhB,IAA4B,2CAA5B,KAAJ,IAA+D,0BAAMA,UAAU,SAAUD,EAAME,OAAOC,OAAOK,SAA9C,KAA/D,KACA,uBAAGP,UAAU,UAAb,IAAwB,8BAAM,kDAA9B,IAAkED,EAAME,OAAOC,OAAOM,YAAtF,MAEJ,yBAAKC,IAAKV,EAAME,OAAOC,OAAOQ,MAAOC,IAAI,OAAOC,MAAM,QAAQZ,UAAU,cCiCrEa,G,MArDH,WAAO,IAAD,EAEUC,mBAAS,WAFnB,mBAEPC,EAFO,KAEDC,EAFC,OAGQF,mBAAS,IAHjB,mBAGTG,EAHS,KAGHC,EAHG,OAImBJ,mBAAS,WAJ5B,mBAIPK,EAJO,KAIMC,EAJN,KAkBdC,qBAAU,WACNC,MACD,CAACP,IAGJ,IAAIO,EAAU,uCAAG,gCAAAC,EAAA,6DACTC,EAAM,mCAAqCT,EAArC,4DADG,SAEQU,MAAMD,GAFd,cAETE,EAFS,gBAGUA,EAASC,OAHnB,OAGPC,EAHO,OAIbV,EAAQU,EAASC,MACjBC,QAAQC,IAAIH,EAASC,MALR,2CAAH,qDAOd,OACI,oCACI,yBAAK7B,UAAU,OACX,yBAAKA,UAAU,YACX,2BAAOgC,KAAK,OAAOC,YAAY,8BAA8BC,SA3B5D,SAACC,GACdf,EAAUe,EAAMC,OAAOC,QA0BsEA,MAAOlB,IACxF,4BAAQmB,QAxBP,WACbtB,EAAQG,GACRC,EAAU,MAsBE,aAGAH,EAAKZ,KAAI,SAACkC,GACN,OAAO,kBAAC,EAAD,CAAMtC,OAAQsC,WC1C7CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SH0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.0655142b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Item.css'\r\n\r\nconst Item = (props) => {\r\n    return (<>\r\n        <div className=\"recipes\" >\r\n\r\n            <h1> {props.source.recipe.label} </h1>\r\n            <div className='ingre' >\r\n                {\r\n                    props.source.recipe.ingredients.map(\r\n                        (ingredients) => {\r\n                            return (\r\n                                <ul>\r\n                                    <li>\r\n                                        {ingredients.text}\r\n                                    </li>\r\n                                </ul>\r\n                            )\r\n                        }\r\n                    )\r\n                }\r\n\r\n            </div>\r\n            <div>\r\n                <p> <span className='calorie' > <h3>Calories : </h3> </span  > <span className='calNo' >{props.source.recipe.calories} </span> </p>\r\n                <p className='weight' > <span><h3> Total Weight :  </h3></span > {props.source.recipe.totalWeight} </p>\r\n            </div>\r\n            <img src={props.source.recipe.image} alt=\"Food\" width='200px' className='image' />\r\n\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Item;","import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport Item from './Item'\r\nimport './App.css'\r\n\r\nlet appId = '971593d7'\r\nlet appKey = 'ad003f2fe5f0e63ef494639ef3e58a3f'\r\n\r\nconst App = () => {\r\n\r\n    const [item, getItem] = useState('chicken')\r\n    let [data, getData] = useState([])\r\n    const [initialData, finalData] = useState('biryani')\r\n\r\n\r\n    const getInput = (event) => {\r\n        finalData(event.target.value)\r\n    }\r\n\r\n    const onSearch = () => {\r\n        getItem(initialData)\r\n        finalData('')\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getRecipes()\r\n    }, [item])\r\n\r\n\r\n    let getRecipes = async () => {\r\n        let url = \"https://api.edamam.com/search?q=\" + item + \"&app_id=\" + appId + \"&app_key=\" + appKey\r\n        let response = await fetch(url)\r\n        const jsonData = await response.json()\r\n        getData(jsonData.hits)\r\n        console.log(jsonData.hits)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='all' >\r\n                <div className=\"getInput\" >\r\n                    <input type=\"text\" placeholder=\"Search your favourite food!\" onChange={getInput} value={initialData} />\r\n                    <button onClick={onSearch} > Search </button>\r\n                </div>\r\n                {\r\n                    data.map((dataObject) => {\r\n                        return <Item source={dataObject} />\r\n                    })\r\n                }\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}